
    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                               Psi4 1.3.2 release

                         Git: Rev {HEAD} ecbda83 


    R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,
    A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,
    R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,
    H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,
    P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,
    F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,
    J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).
    (doi: 10.1021/acs.jctc.7b00174)


                         Additional Contributions by
    P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,
    A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz

    -----------------------------------------------------------------------


    Psi4 started on: Sunday, 02 June 2019 08:00PM

    Process ID: 25364
    Host:       DN0a1fc28d.SUNet
    PSIDATADIR: /anaconda3/share/psi4
    Memory:     500.0 MiB
    Threads:    1
    
  ==> Input File <==

--------------------------------------------------------------------------
"""This is a template for psi4 input format."""
import numpy
import sys

from openfermion.config import *
from openfermion.hamiltonians import MolecularData
from openfermion.ops import general_basis_change

from numpy import array

sys.path.append('/anaconda3/lib/python3.6/site-packages/openfermionpsi4')
from _psi4_conversion_functions import *


# Set memory that job can use in megabytes.
memory 8000 mb

# Initialize molecular data.
_description = '0.3'
if _description == 'None':
    _description = None
molecule = MolecularData([['H', [0, 0, -0.30000000000000004]], ['Be', [0, 0, 0]], ['H', [0, 0, 0.30000000000000004]]],
                         'sto-3g',
                         1,
                         1,
                         _description,
                          filename='/anaconda3/lib/python3.6/site-packages/openfermion/data/H2-Be1_sto-3g_singlet_1+_0.3')

# Set molecular geometry and symmetry.
molecule mol {
H 0 0 -0.30000000000000004
Be 0 0 0
H 0 0 0.30000000000000004
symmetry c1
}
mol.set_multiplicity(1)
mol.set_molecular_charge(1)

# Set reference and guess.
if molecule.multiplicity == 1:
    set reference rhf
    set guess sad
else:
    set reference rohf
    set guess gwh

# Set global parameters of calculation.
set globals {
    basis sto-3g
    freeze_core false
    fail_on_maxiter False
    df_scf_guess false
    opdm true
    tpdm true
    soscf false
    scf_type pk
    maxiter 1e6
    num_amps_print 1e6
    r_convergence 1e-6
    d_convergence 1e-6
    e_convergence 1e-6
    ints_tolerance EQUALITY_TOLERANCE
    damping_percentage 0
}

# Run self-consistent field (SCF) calculation.
if 1:
    try:
        hf_energy, hf_wavefunction = energy('scf', return_wfn=True)
        if 1:
            print('Hartree-Fock energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, hf_energy))
    except:
        if 1:
            print('WARNING: SCF calculation failed.')
        else:
            raise
    finally:
        # Get orbitals and Fock matrix.
        molecule.hf_energy = hf_energy
        molecule.nuclear_repulsion = mol.nuclear_repulsion_energy()
        molecule.canonical_orbitals = numpy.asarray(hf_wavefunction.Ca())
        molecule.overlap_integrals = numpy.asarray(hf_wavefunction.S())
        molecule.n_orbitals = molecule.canonical_orbitals.shape[0]
        molecule.n_qubits = 2 * molecule.n_orbitals
        molecule.orbital_energies = numpy.asarray(hf_wavefunction.epsilon_a())
        molecule.fock_matrix = numpy.asarray(hf_wavefunction.Fa())

        # Get integrals using MintsHelper.
        mints = MintsHelper(hf_wavefunction.basisset())
        molecule.one_body_integrals = general_basis_change(
            numpy.asarray(mints.ao_kinetic()), molecule.canonical_orbitals, (1, 0))
        molecule.one_body_integrals += general_basis_change(
            numpy.asarray(mints.ao_potential()), molecule.canonical_orbitals, (1, 0))
        two_body_integrals = numpy.asarray(mints.ao_eri())
        two_body_integrals.reshape((molecule.n_orbitals, molecule.n_orbitals,
                                    molecule.n_orbitals, molecule.n_orbitals))
        two_body_integrals = numpy.einsum('psqr', two_body_integrals)
        two_body_integrals = general_basis_change(
            two_body_integrals, molecule.canonical_orbitals, (1, 1, 0, 0))
        molecule.two_body_integrals = two_body_integrals
        molecule.save()


# Perform MP2 energy calculation if there are at least two electrons.
if 1:
    try:
        assert molecule.n_electrons > 1
        mp2_energy = energy('mp2')
        if 1:
            print('MP2 energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, mp2_energy))
    except:
        if 1:
            print('WARNING: MP2 calculation failed.')
        else:
            raise
    else:
        molecule.mp2_energy = mp2_energy
        molecule.save()


# Perform configuration interaction singles and doubles (CISD) calculation.
if 1:
    set qc_module detci
    try:
        cisd_energy, cisd_wavefunction = energy('cisd', return_wfn=True)
        if 1:
            print('CISD energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, cisd_energy))
    except:
        if 1:
            print('WARNING: CISD calculation failed.')
        else:
            raise
    else:
        # For the functions below, "a" and "b" refer to "up and "down" spins.
        molecule.cisd_energy = cisd_energy

        # Get 1-RDM from CISD calculation.
        cisd_one_rdm_a = numpy.array(cisd_wavefunction.get_opdm(
            0, 0, 'A', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)
        cisd_one_rdm_b = numpy.array(cisd_wavefunction.get_opdm(
            0, 0, 'B', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)

        # Get 2-RDM from CISD calculation.
        cisd_two_rdm_aa = numpy.array(cisd_wavefunction.get_tpdm(
            'AA', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        cisd_two_rdm_ab = numpy.array(cisd_wavefunction.get_tpdm(
            'AB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        cisd_two_rdm_bb = numpy.array(cisd_wavefunction.get_tpdm(
            'BB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)

        # Get overall RDMs.
        cisd_one_rdm, cisd_two_rdm = unpack_spatial_rdm(
            cisd_one_rdm_a, cisd_one_rdm_b, cisd_two_rdm_aa,
            cisd_two_rdm_ab, cisd_two_rdm_bb)

        # Store 1-RDM in molecule file, 2-RDM separately in other file.
        molecule.cisd_one_rdm = cisd_one_rdm
        molecule.cisd_two_rdm = cisd_two_rdm
        molecule.save()


# Perform exact diagonalization.
if 1:
    set qc_module detci
    try:
        fci_energy, fci_wavefunction = energy('fci', return_wfn=True)
        if 1:
            print('FCI energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, fci_energy))
    except:
        if 1:
            print('WARNING: FCI calculation failed.')
        else:
            raise
    finally:
        # For the functions below, "a" and "b" refer to "up and "down" spins.
        molecule.fci_energy = fci_energy

        # Get 1-RDM from FCI calculation.
        fci_one_rdm_a = numpy.array(fci_wavefunction.get_opdm(
            0, 0, 'A', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)
        fci_one_rdm_b = numpy.array(fci_wavefunction.get_opdm(
            0, 0, 'B', True)).reshape(molecule.n_orbitals, molecule.n_orbitals)

        # Get 2-RDM from FCI calculation.
        fci_two_rdm_aa = numpy.array(fci_wavefunction.get_tpdm(
            'AA', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        fci_two_rdm_ab = numpy.array(fci_wavefunction.get_tpdm(
            'AB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)
        fci_two_rdm_bb = numpy.array(fci_wavefunction.get_tpdm(
            'BB', False)).reshape(molecule.n_orbitals, molecule.n_orbitals,
                                  molecule.n_orbitals, molecule.n_orbitals)

        # Get overall RDMs.
        fci_one_rdm, fci_two_rdm = unpack_spatial_rdm(
            fci_one_rdm_a, fci_one_rdm_b,
            fci_two_rdm_aa, fci_two_rdm_ab, fci_two_rdm_bb)

        # Store 1-RDM in molecule file, 2-RDM separately in other file.
        molecule.fci_one_rdm = fci_one_rdm
        molecule.fci_two_rdm = fci_two_rdm
        molecule.save()


# Perform coupled cluster singles and doubles (CCSD) calculation.
if 1:
    set qc_module ccenergy
    try:
        ccsd_energy = energy('ccsd')
        if 1:
            print('CCSD energy for {} ({} electrons) is {}.'.format(
                molecule.name, molecule.n_electrons, ccsd_energy))
    except:
        if 1:
            print('WARNING: CCSD calculation failed.')
        else:
            raise
    else:
        molecule.ccsd_energy = ccsd_energy

        # Merge CC amplitudes into molecule by parsing
        psi_filename = outfile_name()
        single_cc_amplitudes, double_cc_amplitudes = (
            parse_psi4_ccsd_amplitudes(
                2 * molecule.n_orbitals,
                molecule.get_n_alpha_electrons(),
                molecule.get_n_beta_electrons(),
                psi_filename))

        molecule.ccsd_single_amps = single_cc_amplitudes
        molecule.ccsd_double_amps = double_cc_amplitudes
        molecule.save()
--------------------------------------------------------------------------

  Memory set to   7.451 GiB by Python driver.

*** tstart() called on DN0a1fc28d.SUNet
*** at Sun Jun  2 20:00:44 2019


Traceback (most recent call last):
  File "/anaconda3/bin/psi4", line 287, in <module>
    exec(content)
  File "<string>", line 81, in <module>

NameError: name 'hf_energy' is not defined


Printing out the relevant lines from the Psithon --> Python processed input file:
                print('WARNING: SCF calculation failed.')
            else:
                raise
        finally:
           
-->         molecule.hf_energy = hf_energy
            molecule.nuclear_repulsion = mol.nuclear_repulsion_energy()
            molecule.canonical_orbitals = numpy.asarray(hf_wavefunction.Ca())
            molecule.overlap_integrals = numpy.asarray(hf_wavefunction.S())
            molecule.n_orbitals = molecule.canonical_orbitals.shape[0]
            molecule.n_qubits = 2 * molecule.n_orbitals

    Psi4 stopped on: Sunday, 02 June 2019 08:00PM
    Psi4 wall time for execution: 0:00:00.39

*** Psi4 encountered an error. Buy a developer more coffee!
*** Resources and help at github.com/psi4/psi4.
